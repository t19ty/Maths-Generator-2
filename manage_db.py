#!/usr/bin/env python3
"""
Database management script for Maths Generator App
Useful for viewing and managing database records
"""

import os
import sys
from datetime import datetime

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import User, UserSession, Performance, QuestionHistory

def view_users():
    """Display all users in the database"""
    with app.app_context():
        users = User.query.all()
        print(f"\nüë• Users in Database ({len(users)} total):")
        print("=" * 80)
        for user in users:
            print(f"ID: {user.id}")
            print(f"Email: {user.email}")
            print(f"Name: {user.first_name} {user.last_name}")
            print(f"Role: {user.role}")
            print(f"Created: {user.created_at}")
            print(f"Last Login: {user.last_login}")
            print("-" * 40)

def view_sessions():
    """Display recent user sessions"""
    with app.app_context():
        sessions = UserSession.query.order_by(UserSession.login_time.desc()).limit(20).all()
        print(f"\nüîê Recent Sessions ({len(sessions)} total):")
        print("=" * 80)
        for session in sessions:
            user = User.query.get(session.user_id)
            print(f"User: {user.email if user else 'Unknown'}")
            print(f"Login: {session.login_time}")
            print(f"Logout: {session.logout_time or 'Active'}")
            print(f"IP: {session.ip_address}")
            print(f"Active: {session.is_active}")
            print("-" * 40)

def view_performance():
    """Display performance statistics"""
    with app.app_context():
        performances = Performance.query.all()
        print(f"\nüìä Performance Data ({len(performances)} total):")
        print("=" * 80)
        
        if performances:
            # Overall stats
            correct = len([p for p in performances if p.is_correct])
            accuracy = (correct / len(performances)) * 100
            print(f"Overall Accuracy: {accuracy:.2f}% ({correct}/{len(performances)})")
            
            # By topic
            topics = {}
            for p in performances:
                if p.topic not in topics:
                    topics[p.topic] = {'total': 0, 'correct': 0}
                topics[p.topic]['total'] += 1
                if p.is_correct:
                    topics[p.topic]['correct'] += 1
            
            print("\nüìà Performance by Topic:")
            for topic, stats in topics.items():
                topic_accuracy = (stats['correct'] / stats['total']) * 100
                print(f"  {topic}: {topic_accuracy:.1f}% ({stats['correct']}/{stats['total']})")
            
            # Recent attempts
            recent = Performance.query.order_by(Performance.created_at.desc()).limit(10).all()
            print(f"\nüïí Recent Attempts:")
            for p in recent:
                user = User.query.get(p.user_id)
                status = "‚úÖ" if p.is_correct else "‚ùå"
                print(f"  {status} {user.email if user else 'Unknown'} - {p.topic} ({p.difficulty})")
        else:
            print("No performance data yet.")

def view_questions():
    """Display question history"""
    with app.app_context():
        questions = QuestionHistory.query.order_by(QuestionHistory.generated_at.desc()).limit(20).all()
        print(f"\n‚ùì Recent Questions ({len(questions)} total):")
        print("=" * 80)
        for q in questions:
            user = User.query.get(q.generated_by_user_id) if q.generated_by_user_id else None
            print(f"Topic: {q.topic}")
            print(f"Difficulty: {q.difficulty}")
            print(f"Question: {q.question_text[:100]}...")
            print(f"Generated by: {user.email if user else 'System'}")
            print(f"Time: {q.generated_at}")
            print("-" * 40)

def main():
    """Main menu for database management"""
    while True:
        print("\nüóÑÔ∏è  Database Management Menu")
        print("=" * 30)
        print("1. View Users")
        print("2. View Sessions")
        print("3. View Performance")
        print("4. View Questions")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ").strip()
        
        if choice == '1':
            view_users()
        elif choice == '2':
            view_sessions()
        elif choice == '3':
            view_performance()
        elif choice == '4':
            view_questions()
        elif choice == '5':
            print("Goodbye! üëã")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    print("üóÑÔ∏è  Maths Generator Database Management")
    print("=" * 40)
    main()
